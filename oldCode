/**
 * Write a description of class Reservation here.
 */
public class Reservation {
	
private String myName; 
private String myPaymentType;
private int myAge; 
private int myNumDays;           
private String room; 
private String numOfPeople; 



public Reservation (String name, int age, boolean aaa, String model, String make, boolean advance, 
		int days, String payment) 
{
	myName= name;
	myAge= age;
	isAAA= aaa;
	myModel= model;
	myMake= make;
	isAdvance= advance;
	myNumDays= days;
	myPaymentType= payment;
	
	
	
	}

public String getMake()
{
	return myMake;
}
public String getModel()
{
	return myModel;
}

public String GetCustomerName()
{
	return myName;
}

public double totalCost ()
{
	
	
	// get vehicle details (SUV, car, luxury)
	Vehicle vehicle = null;
	
	if (myMake.equalsIgnoreCase("Chevy") || myMake.equalsIgnoreCase("Mazda")|| myMake.equalsIgnoreCase("Honda") )
	{
		if (myModel.equalsIgnoreCase("Suburban") || myModel.equalsIgnoreCase("Five"))
			vehicle = new SUV(myModel, myMake);
		
		else if (myModel.equalsIgnoreCase("Malibu")|| myModel.equalsIgnoreCase("Civic"))
			vehicle = new Car(myModel, myMake);
		
		else if (myModel.equalsIgnoreCase("Corvette"))
			vehicle = new Luxury(myModel, myMake);
	}
		
		else if (myMake.equalsIgnoreCase("Mercedez"))
	{
		if (myModel.equalsIgnoreCase("Benz"))
			vehicle = new Luxury(myModel, myMake);	
	}
	
	System.out.println("\nYour base cost is: $" + (vehicle.getBaseCost()*myNumDays));
	double totalcost = vehicle.getBaseCost()*myNumDays;
	if (vehicle != null)
	{
		
		double basecost = vehicle.getBaseCost()*myNumDays;
		if (myAge < 25)
		{
			totalcost += (basecost * 0.1);
			System.out.println("Age fee: +$" + (basecost * 0.1));
		}
		
		if (myPaymentType.equalsIgnoreCase ("cash") || myPaymentType.equalsIgnoreCase ("check"))
		{
			totalcost -= (basecost* 0.03);
			System.out.println("PaymentType discount: -$" + (basecost * 0.03));
		}
		
		if(isAdvance)
		{
			totalcost -= (basecost* 0.05);
			System.out.println("Advance discount: -$" + (basecost* 0.05));
		}
		
		
		if(!isAAA)
		{
			totalcost += vehicle.getfuelCharge()*myNumDays; 
			System.out.println("non-AAA member fuel charge: +$" + ((vehicle.getfuelCharge())*myNumDays)); 
		}
		else
		{
			System.out.println("AAA member beneifit (no fuel charge)"); 
			
		}
		
	}
	
	return (totalcost);
}




}

    /**
     * Constructor for objects of class Reservation
     */



    /**
     * This method will generate the cost for the vehicle by passing the number
     * of days the reservation is for and if the customer is a member of AAA
     * 
     * After this cost is determined, additional discounts and expenses may be 
     * applied for advance reservations, payment type, and age under 25.
     * 
     * The method will then display receipt with a final cost and breakdown
     * of costs
     */
 


    	//Use if you wouldlike to make value print like money
        //NumberFormat money = NumberFormat.getCurrencyInstance();





___________
import java.util.*;
import javax.swing.JOptionPane;


/**
 * This class will maintain an ArrayList of all the 
 * Customer Vehicle orders(Vehicle, payment, AAA, etc.)
 * for the day.  This class will also use a method to print
 *  the receipt for each reservation. (Total, discounts applied, fees)
 * 
 * You can input the customers either through a scanner class, or JOption Pane
 * 
 * Don't forget to ask the user each time if they want to add another customer
 */



public class DailyCustomer 
{

	public static void main (String [] args)
	{
		ArrayList<Reservation> arrayList = new ArrayList<Reservation>();
		
		// get Reservation details from all customers
		boolean bAskForMore = true;
		
		do
		{
		Reservation reserv;
		reserv = MakeReservation();
		arrayList.add(reserv);
		
		String option = JOptionPane.showInputDialog("Do you want add another Customer. (Y/N)");
		if (option.equalsIgnoreCase("Y") )
		{
			bAskForMore= true;
		}
		
		else
		{
			bAskForMore= false;
		}
		   System.out.println( "Make and model:" + reserv.getMake()+ " " + reserv.getModel() + "\nCustomer Name: " + reserv.GetCustomerName() + "      Total cost of $" + reserv.totalCost());
		
		} while (bAskForMore);


	}

	public static Reservation MakeReservation ()
	{
		
		
		// get detail
		String name = JOptionPane.showInputDialog("Kindly give us your name.");
		String age = JOptionPane.showInputDialog("Age. Numbers, please.");
		String aaa = JOptionPane.showInputDialog("Please tell us if you are an AAA member.(Y/N)");
		String advance = JOptionPane.showInputDialog("Please tell us if you rented in advance. (Y/N)");
		String make = JOptionPane.showInputDialog("Please tell us the make of the vehicle you wish to rent.");
		String model = JOptionPane.showInputDialog("Please tell us the model you wish to rent");
		String days = JOptionPane.showInputDialog("Please tell us how many days you wish to rent a vehicle. Numbers, please.");
		String payment = JOptionPane.showInputDialog("Please tell us your payment type. (Cash/Credit/Check)");
		
		Reservation reserv = new Reservation(name, Integer.parseInt(age), 
				aaa.equalsIgnoreCase("Y"), model, make, advance.equalsIgnoreCase("Y"), 
				Integer.parseInt(days), payment );
	
		return reserv;
			
	}

	
	
	
}




________________
/**
 * Abstract class Vehicle - This class will be a superclass for the Car, SUV, 
 * and Luxury classes used in the Car Reservation Lab
 */
public abstract class Vehicle {

	private String myModel;
	private String myMake;
	protected double myfuelCharge;
	protected double myCost;

public Vehicle (String model, String make) {
	myMake= model;
	myMake= make;
	
	}

 public abstract double getBaseCost();
 public abstract double getfuelCharge();



}

___________
public class Car extends Vehicle{

	public Car (String model, String make) 
	{
		super(model, make);
		myfuelCharge = 0;
		myCost = 12.5;
	}
	
	public double getBaseCost()
	{
		return myCost;
	}
	
	public double getfuelCharge()
	{
		return myfuelCharge;
	}

}


_____________
public class SUV extends Vehicle{

	public SUV (String model, String make) 
	{
		super(model, make);
		myfuelCharge = 1.5;
		myCost = 24.75;
	}
	
	public double getBaseCost()
	{
		return myCost;
	}
	
	public double getfuelCharge()
	{
		return myfuelCharge;
	}
	
}


_____________
public class Luxury extends Vehicle{

	public Luxury (String model, String make) 
	{
		super(model, make);
		myfuelCharge = 3.5;
		myCost =  58.65;
	}
	
	public double getBaseCost()
	{
		return myCost;
	}
	
	public double getfuelCharge()
	{
		return myfuelCharge;
	}
	
}
